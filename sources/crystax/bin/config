#!/bin/bash

# Copyright (c) 2011-2015 CrystaX.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are
# permitted provided that the following conditions are met:
#
#    1. Redistributions of source code must retain the above copyright notice, this list of
#       conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above copyright notice, this list
#       of conditions and the following disclaimer in the documentation and/or other materials
#       provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY CrystaX ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL CrystaX OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are those of the
# authors and should not be interpreted as representing official policies, either expressed
# or implied, of CrystaX.

cd $(dirname $0)/.. || exit 1

CRYSTAX_SRCDIR=$(pwd)

REQUEST=
ABI=
MULTILIB=
LIBTYPE=static
TOOLCHAIN=gcc4.9
NDK=$(cd ../../ && pwd)

usage()
{
    echo "Usage: $0 [options]"
    echo ""
    echo "Request (mandatory, should be specified only one of them):"
    echo "  --abis                   Print all ABI variants"
    echo "  --multilibs              Print multilibs variants for specific ABI"
    echo "  --sources                Print all source files"
    echo "  --abiflags               Print flags used for choosing target ABI"
    echo "  --cflags                 Print flags for C compiler"
    echo "  --c++flags               Print flags for C++ compiler"
    echo "  --asmflags               Print flags for ASM compiler"
    echo "  --ldflags                Print flags for linker"
    echo "  --libpath                Print path to libraries"
    echo "                           for specified ABI and multilib variant"
    echo "  --sysroot-libpath        The same as above, but print library path"
    echo "                           used in platforms sysroot"
    echo ""
    echo "Parameters (mandatory):"
    echo "  --abi=ABI                Target ABI (armeabi, armeabi-v7a etc)"
    echo ""
    echo "Parameters (optional):"
    echo "  --ndk=DIR                Path to NDK directory [$NDK]"
    echo "  --multilib=MLIB          Specific multilib variant"
    echo "                           If not specified, default one for ABI will be used"
    echo "  --libtype=static|shared  Type of library to be built [$LIBTYPE]"
    echo "  --toolchain=TOOLCHAIN    Toolchain used to build libcrystax [$TOOLCHAIN]"
}

is_debug_mode()
{
    echo $CRYSTAX_DEBUG | grep -iq "^\(yes\|on\|true\|1\)$"
}

all_abis()
{
    echo "armeabi"
    echo "armeabi-v7a"
    echo "armeabi-v7a-hard"
    echo "x86"
    echo "mips"
    echo "arm64-v8a"
    echo "x86_64"
    echo "mips64"
}

# $1: ABI
multilibs_for_abi()
{
    local a=$1
    if [ -z "$a" ]; then
        echo "ERROR: Usage: $0 ABI" 1>&2
        exit 1
    fi

    # First is always default one
    case $a in
        armeabi*)
            echo "thumb"
            echo "arm"
            ;;
        arm64-v8a)
            echo "aarch64"
            ;;
        x86)
            echo "i386"
            ;;
        x86_64)
            echo "x86_64 i386 x32"
            ;;
        mips)
            echo "mips32 mips32r2 mips32r6"
            ;;
        mips64)
            echo "mips64r6 mips64r2 mips32 mips32r2 mips32r6"
            ;;
        *)
            echo "ERROR: Unknown target ABI: $a" 1>&2
            exit 1
    esac
}

# $1: ABI
check_abi()
{
    local abi=$1
    if [ -z "$abi" ]; then
        echo "ERROR: Usage: $0 ABI" 1>&2
        exit 1
    fi

    all_abis | tr ' ' '\n' | grep -q "^$abi$"
    if [ $? -ne 0 ]; then
        echo "ERROR: ABI '$abi' not supported" 1>&2
        exit 1
    fi
}

# $1: ABI
# $2: multilib variant
check_multilib()
{
    local abi=$1
    local mlib=$2
    if [ -z "$abi" -o -z "$mlib" ]; then
        echo "ERROR: Usage: $0 ABI MULTILIB" 1>&2
        exit 1
    fi

    multilibs_for_abi $abi | tr ' ' '\n' | grep -q "^$mlib$"
    if [ $? -ne 0 ]; then
        echo "ERROR: '$mlib' is wrong multilib variant for ABI '$abi'" 1>&2
        exit 1
    fi
}

# $1: ABI
# $2: multilib variant
# $3: libtype (static or shared)
sources_for_abi()
{
    local a=$1
    local m=$2
    local t=$3
    if [ -z "$a" -o -z "$m" -o -z "$t" ]; then
        echo "ERROR: Usage: $0 ABI MULTILIB LIBTYPE" 1>&2
        exit 1
    fi

    local arch

    find src -name '*.c' -a -not -name 'fenv.c' -print | sort

    find src -name '*.cpp' -a -not -name 'android_jni.cpp' -print | sort

    if [ "$t" = "shared" ]; then
        echo "src/crystax/android_jni.cpp"
    fi

    arch=""
    case $a in
        armeabi*)
            arch=arm
            ;;
        arm64*)
            arch=arm64
            ;;
        x86)
            arch=i386
            ;;
        x86_64)
            case $m in
                i386)
                    arch=i386
                    ;;
                *)
                    arch=x86_64
            esac
            ;;
        mips)
            arch=mips
            ;;
        mips64)
            case $m in
                mips32*)
                    arch=mips
                    ;;
                *)
                    arch=mips64
            esac
            ;;
    esac

    test -n "$arch" && echo "src/math/$arch/fenv.c"

    find gen -name '*.c'   -a -not -name 'mangled-*' -print | sort
    find gen -name '*.cpp' -a -not -name 'mangled-*' -print | sort

    case $a in
        armeabi*)
            arch=arm
            ;;
        arm64*)
            arch=arm64
            ;;
        x86_64)
            if [ "$m" = "i386" ]; then
                arch=x86
            else
                arch=x86_64
            fi
            ;;
        mips64)
            case $m in
                mips64*)
                    arch=mips64
                    ;;
                *)
                    arch=mips
            esac
            ;;
        *)
            arch=$a
    esac

    find gen/bionic/libc/arch-$arch -iname '*.s' -a -not -name 'mangled-*' -print | sort

    find vendor/compiler-rt/lib/BlocksRuntime -name '*.c' -print
}

# $1: ABI
# $2: multilib variant
arch_flags_for_abi()
{
    local abi=$1
    local mlib=$2

    if [ -z "$abi" -o -z "$mlib" ]; then
        echo "ERROR: Usage $0 ABI MULTILIB" 1>&2
        exit 1
    fi

    check_abi $abi
    check_multilib $abi $mlib

    case $mlib in
        arm|thumb)
            case $abi in
                armeabi)
                    echo "-march=armv5te -mtune=xscale -msoft-float"
                    ;;
                armeabi-v7a)
                    echo "-march=armv7-a -mfpu=vfpv3-d16 -mfloat-abi=softfp"
                    ;;
                armeabi-v7a-hard)
                    echo "-march=armv7-a -mfpu=vfpv3-d16 -mhard-float"
                    ;;
            esac
            if [ "$mlib" = "thumb" ]; then
                echo "-mthumb"
                if [ ${TOOLCHAIN##gcc} != ${TOOLCHAIN} ]; then
                    echo "-minline-thumb1-jumptable"
                fi
            fi
            ;;
        aarch64)
            echo ""
            ;;
        i386)
            echo "-m32"
            ;;
        x86_64)
            echo "-m64"
            ;;
        x32)
            echo "-mx32"
            ;;
        mips32)
            echo "-mabi=32 -mips32"
            ;;
        mips32r2)
            echo "-mabi=32 -mips32r2"
            ;;
        mips32r6)
            echo "-mabi=32 -mips32r6"
            ;;
        mips64r6)
            echo "-mabi=64 -mips64r6"
            ;;
        mips64r2)
            echo "-mabi=64 -mips64r2"
            ;;
        *)
            echo "ERROR: Unsupported multilib variant: '$mlib'" 1>&2
            exit 1
    esac
}

# $1: ABI
# $2: multilib variant
common_cflags_for_abi()
{
    local abi mlib
    local flags crystax freebsd bsdarch

    abi=$1
    mlib=$2

    if [ -z "$abi" -o -z "$mlib" ]; then
        echo "ERROR: Usage: $0 ABI MULTILIB" 1>&2
        exit 1
    fi

    crystax=$CRYSTAX_SRCDIR
    freebsd=$CRYSTAX_SRCDIR/gen/freebsd
    bionic=$CRYSTAX_SRCDIR/gen/bionic
    systemcore=$CRYSTAX_SRCDIR/gen/systemcore
    cxx=$CRYSTAX_SRCDIR/../cxx-stl/system

    arch_flags_for_abi $abi $mlib

    echo "-fPIC -DPIC"
    echo "-g -O2"

    if is_debug_mode; then
        echo "-D_DEBUG"
        echo "-DCRYSTAX_DEBUG=1"
    else
        echo "-DNDEBUG"
    fi

    echo "-D__USE_GNU"

    echo "-DCRYSTAX_LOG_DEFINE_SHORT_MACROS=1"

    echo "-D_POSIX_SOURCE"
    echo "-DBZ_NO_STDIO"

    echo "-D__DBINTERFACE_PRIVATE"

    echo "-ffunction-sections -fdata-sections"
    echo "-fdiagnostics-show-option"

    # This is to workaround GCC "(long)fn -> lfn" optimization bug.
    # See https://android-review.googlesource.com/#/c/96345/ for details.
    echo "-fno-builtin-rint"
    echo "-fno-builtin-rintf"
    echo "-fno-builtin-rintl"

    echo "-Wall -Wextra"
    echo "-Werror"
    if   [ ${TOOLCHAIN##gcc}   != ${TOOLCHAIN} ]; then
        echo "-Wno-pragmas"
    elif [ ${TOOLCHAIN##clang} != ${TOOLCHAIN} ]; then
        echo "-Wno-unknown-pragmas"
    fi

    # First, include Bionic and system/core headers, which can override some of public headers
    echo "-I$bionic/libc/include"
    echo "-I$bionic/libc"
    echo "-I$systemcore/include"

    echo "-I$crystax/include"
    echo "-I$crystax/src/include"

    echo "-I$crystax/vendor/bzip2"

    echo "-I$freebsd/contrib/gdtoa"
    echo "-I$freebsd/contrib/libc-vis"
    echo "-I$freebsd/contrib/tzcode/stdtime"
    echo "-I$freebsd/lib/libc/iconv"
    echo "-I$freebsd/lib/libc/include"
    echo "-I$freebsd/lib/libc/locale"
    echo "-I$freebsd/lib/libc/stdio"
    echo "-I$freebsd/lib/libc/stdlib"
    echo "-I$freebsd/lib/libc/stdtime"

    echo "-I$freebsd/lib/msun/src"
    if [ "${abi%%64*}" != "{abi}" ]; then
        echo "-I$freebsd/lib/msun/ld128"
    fi

    case $abi in
        armeabi*)
            bsdarch=arm
            ;;
        x86)
            bsdarch=i386
            ;;
        mips)
            bsdarch=mips
            ;;
        x86_64)
            case $mlib in
                x86_64)
                    bsdarch=amd64
                    ;;
                *)
                    bsdarch=i386
            esac
            ;;
        arm64*)
            bsdarch=arm64
            ;;
        mips64)
            case $mlib in
                mips64*)
                    bsdarch=mips64
                    ;;
                *)
                    bsdarch=mips
            esac
            ;;
    esac

    if [ -n "$bsdarch" ]; then
        echo "-I$freebsd/lib/libc/$bsdarch"
    fi

    echo "-I$cxx/include"
}

# $1: ABI
# $2: multilib variant
cflags_for_abi()
{
    local a=$1
    local m=$2
    if [ -z "$a" -o -z "$m" ]; then
        echo "ERROR: Usage: $0 ABI MULTILIB" 1>&2
        exit 1
    fi

    echo "-std=c11"
    common_cflags_for_abi $a $m
}

# $1: ABI
# $2: multilib variant
cxxflags_for_abi()
{
    local a=$1
    local m=$2
    if [ -z "$a" -o -z "$m" ]; then
        echo "ERROR: Usage: $0 ABI MULTILIB" 1>&2
        exit 1
    fi
    echo "-std=c++11 -fuse-cxa-atexit -fno-exceptions -fno-rtti"
    common_cflags_for_abi $a $m
}

# $1: ABI
# $2: multilib variant
asmflags_for_abi()
{
    local a=$1
    local m=$2
    if [ -z "$a" -o -z "$m" ]; then
        echo "ERROR: Usage: $0 ABI MULTILIB" 1>&2
        exit 1
    fi

    local bionic=$CRYSTAX_SRCDIR/gen/bionic

    arch_flags_for_abi $a $m
    echo "-O2"

    local arch
    case $a in
        armeabi*)
            arch=arm
            ;;
        arm64*)
            arch=arm64
            ;;
        x86_64)
            case $m in
                i386)
                    arch=x86
                    ;;
                *)
                    arch=x86_64
            esac
            ;;
        mips64)
            case $m in
                mips64*)
                    arch=mips64
                    ;;
                *)
                    arch=mips
            esac
            ;;
        *)
            arch=$a
    esac

    echo "-D__set_errno_internal=__crystax_set_errno_internal"

    echo "-I$bionic/libc/arch-$arch/include"
    echo "-I$bionic/libc"
}

# $1: ABI
# $2: multilib variant
ldflags_for_abi()
{
    local a=$1
    local m=$2
    if [ -z "$2" -o -z "$m" ]; then
        echo "ERROR: Usage: $0 ABI MULTILIB" 1>&2
        exit 1
    fi

    if [ "$a" = "armeabi-v7a" -o "$a" = "armeabi-v7a-hard" ]; then
        echo "-Wl,--fix-cortex-a8"
    fi

    if [ "$a" = "armeabi-v7a-hard" ]; then
        # This is needed to link with crtbegin_so.o/crtend_so.o, compiled with soft float ABI
        # Please note this is dangerous option and it's easy to miss real
        # mismatch when it enabled.
        # Unfortunately, right now we just have no other option beside this one.
        # TODO: build crtbegin_so.o/crtend_so.o with proper float ABI.
        echo "-Wl,--no-warn-mismatch"
    fi

    echo "-Wl,--no-undefined"
    echo "-Wl,-z,noexecstack"
    # Android dynamic linker don't support DF_1_INTERPOSE and DF_1_NODELETE ELF flags
    #echo "-Wl,-z,interpose"
    #echo "-Wl,-z,nodelete"

    echo "-Wl,-Bstatic,-lgcc"
    echo "-Wl,-Bdynamic,-lc"
    echo "-Wl,-Bdynamic,-ldl"
}

# $1: ABI
# $2: multilib variant
libpath_for_abi()
{
    local a=$1
    local m=$2
    if [ -z "$a" -o -z "$m" ]; then
        echo "ERROR: Usage: $0 ABI MULTILIB"
        exit 1
    fi

    check_abi $a
    check_multilib $a $m

    local p

    case $m in
        arm|thumb)
            case $a in
                armeabi)
                    p="libs/armeabi"
                    ;;
                armeabi-v7a)
                    p="libs/armeabi-v7a"
                    ;;
                armeabi-v7a-hard)
                    p="libs/armeabi-v7a-hard"
                    ;;
            esac
            if [ "$m" = "thumb" ]; then
                p="$p/thumb"
            fi
            ;;
        aarch64)
            p="libs/arm64-v8a"
            ;;
        i386)
            case $a in
                x86)
                    p="libs/x86"
                    ;;
                x86_64)
                    p="libs/x86_64/32"
                    ;;
            esac
            ;;
        x86_64)
            p="libs/x86_64"
            ;;
        x32)
            p="libs/x86_64/x32"
            ;;
        mips32)
            case $a in
                mips)
                    p="libs/mips"
                    ;;
                mips64)
                    p="libs/mips64/lib32"
                    ;;
            esac
            ;;
        mips32r2)
            case $a in
                mips)
                    p="libs/mips/r2"
                    ;;
                mips64)
                    p="libs/mips64/lib32r2"
                    ;;
            esac
            ;;
        mips32r6)
            case $a in
                mips)
                    p="libs/mips/r6"
                    ;;
                mips64)
                    p="libs/mips64/lib32r6"
                    ;;
            esac
            ;;
        mips64r6)
            p="libs/mips64"
            ;;
        mips64r2)
            p="libs/mips64/r2"
            ;;
        *)
            echo "ERROR: Unsupported multilib variant: $m" 1>&2
            exit 1
    esac

    echo "$p"
}

# $1: ABI
# $2: multilib variant
sysroot_libpath_for_abi()
{
    local a=$1
    local m=$2
    if [ -z "$a" -o -z "$m" ]; then
        echo "ERROR: Usage: $0 ABI MULTILIB"
        exit 1
    fi

    check_abi $a
    check_multilib $a $m

    case $m in
        x86_64|mips64r6)
            echo "lib64"
            ;;
        x32)
            echo "libx32"
            ;;
        mips32r2)
            echo "libr2"
            ;;
        mips32r6)
            echo "libr6"
            ;;
        mips64r2)
            echo "lib64r2"
            ;;
        *)
            echo "lib"
    esac
}

set_request()
{
    local newval=$1
    if [ -n "$REQUEST" ]; then
        echo "ERROR: 'request' specified twice (first: $REQUEST)" 1>&2
        usage 1>&2
        exit 1
    fi
    REQUEST=$newval
}

set_abi()
{
    local newval=$1
    if [ -n "$ABI" -a "$ABI" != "$newval" ]; then
        echo "ERROR: ABI specified twice (first: $ABI)" 1>&2
        usage 1>&2
        exit 1
    fi
    check_abi $newval
    ABI=$newval
}

set_multilib()
{
    local newval=$1
    if [ -z "$newval" ]; then
        echo "ERROR: empty 'multilib' passed" 1>&2
        usage 1>&2
        exit 1
    fi
    if [ -n "$MULTILIB" -a "$MULTILIB" != "$newval" ]; then
        echo "ERROR: 'multilib' specified twice (first: $MULTILIB)" 1>&2
        usage 1>&2
        exit 1
    fi
    if [ -n "$ABI" ]; then
        check_multilib $ABI $newval
    fi
    MULTILIB=$newval
}

set_ndkdir()
{
    local newval=$1
    if [ ! -d $newval -o ! -d $newval/platforms ]; then
        echo "ERROR: Wrong NDK path: $newval" 1>&2
        exit 1
    fi
    NDK=$newval
}

set_libtype()
{
    local newval=$1
    case $newval in
        static|shared)
            LIBTYPE=$newval
            ;;
        *)
            echo "ERROR: Wrong 'libtype': $newval" 1>&2
            usage 1>&2
            exit 1
    esac
}

set_toolchain()
{
    local newval=$1
    case $newval in
        gcc4.8|gcc4.9|clang3.4|clang3.5)
            TOOLCHAIN=$newval
            ;;
        *)
            echo "ERROR: Wrong 'toolchain': $newval" 1>&2
            usage 1>&2
            exit 1
    esac
}

while [ "x$1" != "x" ]; do
    arg=$1
    shift
    case $arg in
        -h|-help|--help)
            usage
            exit 0
            ;;
        --abis|--multilibs|--sources|--abiflags|--cflags|--c++flags|--asmflags|--ldflags|--libpath|--sysroot-libpath)
            set_request $(expr "x$arg" : "^x--\(.*\)$")
            ;;
        --abi)
            set_abi $1
            shift
            ;;
        --abi=*)
            set_abi $(expr "x$arg" : "^x--abi=\(.*\)$")
            ;;
        --multilib)
            set_multilib $1
            shift
            ;;
        --multilib=*)
            set_multilib $(expr "x$arg" : "^x--multilib=\(.*\)$")
            ;;
        --ndk)
            set_ndkdir $1
            shift
            ;;
        --ndk=*)
            set_ndkdir $(expr "x$arg" : "^x--ndk=\(.*\)$")
            ;;
        --libtype)
            set_libtype $1
            shift
            ;;
        --libtype=*)
            set_libtype $(expr "x$arg" : "^x--libtype=\(.*\)$")
            ;;
        --toolchain)
            set_toolchain $1
            shift
            ;;
        --toolchain=*)
            set_toolchain $(expr "x$arg" : "^x--toolchain=\(.*\)$")
            ;;
        *)
            echo "ERROR: Unknown option: $arg" 1>&2
            usage 1>&2
            exit 1
    esac
done

if [ -z "$REQUEST" ]; then
    echo "ERROR: 'request' not specified" 1>&2
    usage 1>&2
    exit 1
fi

if [ -z "$ABI" -a "$REQUEST" != "abis" ]; then
    echo "ERROR: ABI not specified" 1>&2
    usage 1>&2
    exit 1
fi

if [ "$REQUEST" = "abis" -a -n "$ABI" ]; then
    echo "ERROR: Parameter --abi=ABI shouldn't be specified when requesting list of ABI" 1>&2
    usage 1>&2
    exit 1
fi

if [ -z "$MULTILIB" -a "$REQUEST" != "abis" -a "$REQUEST" != "multilibs" ]; then
    all_multilibs=$(multilibs_for_abi $ABI)
    if [ $(echo $all_multilibs | wc -w) -gt 1 ]; then
        MULTILIB=$(echo $all_multilibs | tr ' ' '\n' | head -n 1)
        #echo "WARNING: 'multilib' not specified; using default one [$MULTILIB]" 1>&2
    else
        MULTILIB=$all_multilibs
    fi
fi

if [ "$REQUEST" = "multilibs" -a -n "$MULTILIB" ]; then
    echo "ERROR: Parameter --multilib=M shouldn't be specified when requesting list of multilibs" 1>&2
    usage 1>&2
    exit 1
fi

if [ "$REQUEST" = "abiflags" ]; then
    if [ -z "$ABI" -o -z "$MULTILIB" ]; then
        echo "ERROR: Both --abi=ABI and --multilib=MLIB should be specified for 'abiflags' request" 1>&2
        usage 1>&2
        exit 1
    fi
fi

case $REQUEST in
    abis)
        all_abis
        ;;
    multilibs)
        multilibs_for_abi $ABI
        ;;
    sources)
        sources_for_abi $ABI $MULTILIB $LIBTYPE
        ;;
    abiflags)
        arch_flags_for_abi $ABI $MULTILIB
        ;;
    cflags)
        cflags_for_abi $ABI $MULTILIB
        ;;
    c++flags)
        cxxflags_for_abi $ABI $MULTILIB
        ;;
    asmflags)
        asmflags_for_abi $ABI $MULTILIB
        ;;
    ldflags)
        ldflags_for_abi $ABI $MULTILIB
        ;;
    libpath)
        libpath_for_abi $ABI $MULTILIB
        ;;
    sysroot-libpath)
        sysroot_libpath_for_abi $ABI $MULTILIB
        ;;
    *)
        echo "ERROR: Unsupported request: $REQUEST"
        exit 1
esac
